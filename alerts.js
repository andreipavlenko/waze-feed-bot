const tg = require('./telegram');

const channelId = process.env.CHANNEL_ID;

const alertTypes = {
    potHole: 'HAZARD_ON_ROAD_POT_HOLE',
    construction: 'HAZARD_ON_ROAD_CONSTRUCTION',
    hazard: 'HAZARD_ON_ROAD',
    objectOnRoad: 'HAZARD_ON_ROAD_OBJECT',
    killedAnimal: 'HAZARD_ON_ROAD_ROAD_KILL',
    shoulderAnimals: 'HAZARD_ON_SHOULDER_ANIMALS'
};

function handleAlert(alert) {
    switch (alert.type) {
        case 'CHIT_CHAT':
            return handleChitChat(alert);
    }

    switch (alert.subtype) {
        case alertTypes.potHole:
            return handlePotHoleAlert(alert);
        case alertTypes.construction:
            return handleConstructionAlert(alert);
        case alertTypes.hazard:
            return handleHazardAlert(alert);
        case alertTypes.objectOnRoad:
            return handleObjectOnRoadAlert(alert);
        case alertTypes.killedAnimal:
            return handleKilledAnimalAlert(alert);
        case alertTypes.shoulderAnimals:
            return handleShoulderAnimalsAlert(alert);
        default:
            tg.sendUnknownAlertInfo(alert);
    }
}

function handleShoulderAnimalsAlert(alert) {
    sendAlertMessage(alert, '–ø–æ–±–ª–∏–∑—É —Ç–≤–∞—Ä–∏–Ω–∏ üêÑüêëüêï');
}

function handleKilledAnimalAlert(alert) {
    sendAlertMessage(alert, '–∑–±–∏—Ç–∞ —Ç–≤–∞—Ä–∏–Ω–∫–∞ üò•');
}

function handleObjectOnRoadAlert(alert) {
    let { reportBy, street, city, location } = alert;
    let who = reportBy ? reportBy : '–•—Ç–æ—Å—å';
    let where = street ? `–Ω–∞ ${street}` : `—É –º. ${city}`;
    where = where ? where : '–¥–µ—Å—å';

    let message = `üì¢ ${who} –ø–æ–≤—ñ–¥–æ–º–ª—è—î, —â–æ ${where} –ø–µ—Ä–µ—à–∫–æ–¥–∞ üå≤`;
    let inlineKeyboard = buildLinkReplyKeyboard(location);

    tg.sendMessage(channelId, message, inlineKeyboard);
}

function handleChitChat(alert) {
    let { reportBy, location } = alert;
    let who = reportBy ? reportBy : '–•—Ç–æ—Å—å';

    let message = `üì¢ ${who} –∑–∞–ª–∏—à–∏–≤ –∫–æ–º–µ–Ω—Ç–∞—Ä –Ω–∞ –º–∞–ø—ñ üí≠`;
    let inlineKeyboard = buildLinkReplyKeyboard(location);

    tg.sendMessage(channelId, message, inlineKeyboard);
}

function handleHazardAlert(alert) {
    let { reportBy, street, city, location } = alert;
    let who = reportBy ? reportBy : '–•—Ç–æ—Å—å';
    let where = street ? `–Ω–∞ ${street}` : `—É –º. ${city}`;
    where = where ? where : '–¥–µ—Å—å';

    let message = `üì¢ ${who} –ø–æ–≤—ñ–¥–æ–º–ª—è—î, —â–æ ${where} –Ω–µ–±–µ–∑–ø–µ–∫–∞ üí£`;
    let inlineKeyboard = buildLinkReplyKeyboard(location);

    tg.sendMessage(channelId, message, inlineKeyboard);
}

function handleConstructionAlert(alert) {
    let { reportBy, street, city, location } = alert;
    let who = reportBy ? reportBy : '–•—Ç–æ—Å—å';
    let where = street ? `–Ω–∞ ${street}` : `—É –º. ${city}`;
    where = where ? where : '–¥–µ—Å—å';

    let message = `üì¢ ${who} –ø–æ–≤—ñ–¥–æ–º–ª—è—î, —â–æ ${where} —Ä–µ–º–æ–Ω—Ç –¥–æ—Ä–æ–≥–∏ üöß`;
    let inlineKeyboard = buildLinkReplyKeyboard(location);

    tg.sendMessage(channelId, message, inlineKeyboard);
}

function handlePotHoleAlert(alert) {
    let { reportBy, street, city, location } = alert;
    let who = reportBy ? reportBy : '–•—Ç–æ—Å—å';
    let where = street ? `–Ω–∞ ${street}` : `—É –º. ${city}`;
    where = where ? where : '–¥–µ—Å—å';

    let message = `üì¢ ${who} –ø–æ–≤—ñ–¥–æ–º–ª—è—î, —â–æ ${where} —è–º–∞ üôÇ`;
    let inlineKeyboard = buildLinkReplyKeyboard(location);

    tg.sendMessage(channelId, message, inlineKeyboard);
}

function sendAlertMessage(alert, messageEnding) {
    let { reportBy, street, city, location } = alert;
    let who = reportBy ? reportBy : '–•—Ç–æ—Å—å';
    let where;
    if (street) {
        where = `–Ω–∞ ${street}`;
    } else if (city) {
        where = `—É –º. ${city}`;
    } else {
        where = '–¥–µ—Å—å';
    }

    let message = `üì¢ ${who} –ø–æ–≤—ñ–¥–æ–º–ª—è—î, —â–æ ${where} ${messageEnding}`;
    let inlineKeyboard = buildLinkReplyKeyboard(location);

    tg.sendMessage(channelId, message, inlineKeyboard);
}

function getAlertUrl(location) {
    return `https://www.waze.com/en/livemap/directions?latlng=${location.y}%2C${location.x}&utm_campaign=waze_website&utm_source=waze_website`;
}

function buildLinkReplyKeyboard(location) {
    let inlineKeyboard = {
        inline_keyboard: [
            [{
                text: '–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ üó∫Ô∏è',
                url: getAlertUrl(location)
            }]
        ]
    };
    return inlineKeyboard;
}

exports.handleAlert = handleAlert;